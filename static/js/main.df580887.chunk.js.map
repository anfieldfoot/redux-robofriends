{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.df580887.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n\treturn (\r\n       <div className='tc bg-light-blue dib br2 pa1 ma2 grow bw2 shadow-5'>\r\n          <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n          <div>\r\n            <h2>{ name }</h2>\r\n            <p> { email }</p>\r\n          </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({ robots }) => {\r\n  \r\n   const cardComponent = robots.map((user, i) => {\r\n   \t return( \r\n\t   \t  <Card \r\n\t   \t     key={i} \r\n\t\t   \t id={ robots[i].id } \r\n\t\t   \t name = { robots[i].name } \r\n\t\t   \t email ={ robots[i].email} \r\n\t   \t  />\r\n\t  );\r\n   })\t\r\n\treturn (\r\n      <div>\r\n         {cardComponent}\r\n      </div>   \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n  \t<div className='pa2'>\r\n      <input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n         type='search' \r\n         placeholder='search robots' \r\n         onChange={ searchChange }\r\n       />\r\n    </div> \r\n\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n   \t<div style={{overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n       {props.children}\r\n   \t</div>\r\n   );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Ooopppsss. That was not good!</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component }from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n  \t searchField: state.searchRobots.searchField,\r\n  \t robots: state.requestRobots.robots,\r\n  \t isPending: state.requestRobots.isPending,\r\n  \t error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n\t  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t  onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t\t\r\n\t}\r\n    \r\n  \trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n        <h1>Loading</h1> :\r\n\t\t(\r\n\t\t     <div className ='tc'>\r\n\t\t\t      <h1 className='f1'>Robofriends</h1>\r\n\t\t\t      <SearchBox searchChange={onSearchChange} />\r\n\t          <Scroll> \r\n                  <ErrorBoundary>\r\n\t                 <CardList robots={filteredRobots}/>\r\n\t              </ErrorBoundary>   \r\n\t          </Scroll>  \r\n\t       </div> \r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n   type : CHANGE_SEARCH_FIELD,\r\n   payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error  }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst intialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField:action.payload});\r\n      default: \r\n        return state;\r\n  }\r\n}\r\n\r\nconst intialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t  return Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t  return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t  return Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t return state;\r\n\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger))\n\n\nReactDOM.render(\n  \t\n    <React.StrictMode>\n      <Provider store={ store }>\n        <App  />\n      </Provider> \n     </React.StrictMode>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}